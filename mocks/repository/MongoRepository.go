// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/CNMoreno/cnm-proyect-go/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MongoRepository is an autogenerated mock type for the MongoRepository type
type MongoRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MongoRepository) CreateUser(ctx context.Context, user *domain.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserBatch provides a mock function with given fields: ctx, users
func (_m *MongoRepository) CreateUserBatch(ctx context.Context, users *[]domain.User) ([]interface{}, error) {
	ret := _m.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserBatch")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]domain.User) ([]interface{}, error)); ok {
		return rf(ctx, users)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *[]domain.User) []interface{}); ok {
		r0 = rf(ctx, users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *[]domain.User) error); ok {
		r1 = rf(ctx, users)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MongoRepository) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *MongoRepository) GetUserByID(ctx context.Context, id string) (*domain.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, id, updateFields
func (_m *MongoRepository) UpdateUser(ctx context.Context, id string, updateFields *domain.User) (*domain.User, error) {
	ret := _m.Called(ctx, id, updateFields)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.User) (*domain.User, error)); ok {
		return rf(ctx, id, updateFields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *domain.User) *domain.User); ok {
		r0 = rf(ctx, id, updateFields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *domain.User) error); ok {
		r1 = rf(ctx, id, updateFields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMongoRepository creates a new instance of MongoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongoRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongoRepository {
	mock := &MongoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
